{
  "from": "Marley \"Javascript\" Jackson",
  "date": 1481698800000,
  "subject": "ECMAScript 6: What’s Different?",
  "content": "<h3>ECMAScript 6: What’s Different? </h3><br /><p>It’s the most prevalent client-side scripting language on the web today. But, what’s new since the previous iteration?<br />ECMAScript 6, informally known as “the 2015 version of Javascript”, is in fact only one of the more recent standardized specifications of Javascript. <br /><br /><h4>What’s Different?</h4>Primarily, ECMAScript 6 introduces a lot of syntactic flair, with both a goal to simplify existing ways of implementing different concepts, and to introduce some new ones as well where previously there was no implementation. Highlighted below are some of the features with which I’m most familiar.<br /><br /><h4>Generators</h4>A generator is similar to an iterator – an object that can traverse a list of data. However, there’s a big difference: generators allow you to “generate” an iterator in a much simpler way. You just need to define a generator using the function* syntax and then call it to generate an iterated sequence with the defined yield values.<br /><br /><h4>Symbols</h4>A new, immutable, primitive type in ECMAScript 6, these are unique identifiers for different properties of an object. Just like other data types, these symbols have methods specific to them, such as the object.getOwnPropertySymbols() method. Although unique, these symbols aren’t private since they’re still exposed by such methods.<br /><br /><h4>Template Literals</h4>Originally referred to in the ECMAScript 6 Specification as “Template Strings”, these allow for a more intuitive interpolation for both single-line and multi-line strings. Primarily an effort in the way of syntactic sugar, this makes certain string substitutions more legible.<br /><br /><h4>New Data Structures</h4>ECMAScript 6 introduces Maps and Sets, which are more efficient data types. These new data structures introduce their own methods as well for easy traversing of the data. Maps, Sets, WeakMaps and WeakSets also allow for more complex and intuitive algorithm design. This is a great advantage if you used the previous iteration of ECMAScript and felt working with arrays to be very limiting.<br /><br /><h4>Modules</h4>You can use modules to import and export dependencies, a feature which was previously only seen in 3rd-party libraries such as CommonJS and React. You can also load these modules asynchronously, and provide feedback on errors at compile-time instead of at run-time.<br />____<br />This is not an exhaustive resource on new ECMAScript 6 features, only a rundown of my ones I’ve used frequently. Visit the MDN for more.)</p>",
  "id": 74838344
}
